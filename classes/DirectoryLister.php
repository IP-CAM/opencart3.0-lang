<?php


class DirectoryLister
{
    private $_lister;
    private $_files = array();
    private $_rootDirectory = '';
    private $_internalDirectory;
    private $_extension = '';

    /**
     * DirectoryLister constructor.
     * @param string $startDirectory initial directory from which start looking for files
     * @param string $directory Directory on the file system in which start searching
     * @param string $extension Extension of the file you are searching for
     */
    public function __construct($startDirectory = '.', $directory = '', $extension = 'txt'){
        $this->_rootDirectory = $directory;
        $this->_internalDirectory = $startDirectory;
        $this->_extension = $extension;
    }

    /**
     * @param $path1 string of first path
     * @param $path2 string of second path
     * @return string of combined path
     */
    private function mergePath($path1, $path2){
        return $path1 . '/' . $path2;
    }

    /**
     * @param $directory
     * @param $internal
     */
    private function findFiles($directory, $internal){
        $startDirectory = ($internal == '') ? $directory : $this->mergePath($directory, $internal);
        $dir = new DirectoryIterator($startDirectory);
        foreach($dir as $fileinfo){
            if ($fileinfo->isDir()){
                if (($fileinfo->getFilename() != '.') && ($fileinfo->getFilename() != '..')){
                    $subdirectory = $this->mergePath($internal, $fileinfo->getFilename());
                    //echo '<br/>' . $subdirectory;
                    $this->findFiles($directory , $subdirectory);
                }
            }
            else
            {
                if ($fileinfo->getExtension() == $this->_extension){
                    $phpFilename = $internal . '/' . $fileinfo->getFilename();
                    //echo '<br/>' . $phpFilename;
                    $pair[$internal] = $fileinfo->getFilename();
                    array_push($this->_files, $pair);
                }
            }
        }
        return;
    }

    /**
     * @return array contains pairs Key = Value, where Key is the directory where file is contained and Value is the name of the file
     */
    public function getAllFiles(){
        $this->findFiles($this->_rootDirectory, $this->_internalDirectory);
        return $this->_files;
    }

    public function populateFiles($arrayOfValues, $startDirectory ){
        $startDirectory = $this->mergePath($startDirectory, 'output');
        if (is_array($arrayOfValues)) {
            foreach ($arrayOfValues as $key => $value) {
                //$key = str_replace('uz-uz', 'ru-ru', $key);
                $strings = explode('*', $key);
                $subdir = $strings[0];
                $fileName = $strings[1];
                $paramName = $strings[2];
				//$value = str_replace("'","\'",$value);
                $paramValue = $value;
                //var_dump($subdir .':'.$fileName.':'.$paramName.':'.$paramValue);
                //die();
                $dir = $this->mergePath($startDirectory, $subdir);
                if (!(file_exists($dir))) {
                    mkdir($dir, 0777, true);
                }
                $fullFileName = $dir . '/' . $fileName;
                if (!(file_exists($fullFileName))) {
                    $handle = fopen($fullFileName, "c");
                    fwrite($handle, "<?php\n");
                    fwrite($handle, "// *	@source	    See SOURCE.txt for source and other copyright.\n");
                    fwrite($handle, "// *	@license    GNU General Public License version 3; see LICENSE.txt\n");
                    fwrite($handle, "// *	@generated  Generated by File generator\n");
                    fwrite($handle, "// *	@author	    VSPak@beeline.uz\n");
                    fwrite($handle, "\n");
                    fwrite($handle, "\$_['". $paramName . "'] = '" . $paramValue . "';\n");
                    //fсlose($handle);
                } else {
                    $handle = fopen($fullFileName, "a");
                    fwrite($handle, "\$_['". $paramName . "'] = '" . $paramValue . "';\n");
                    //fсlose($handle);
                }
            }
        }
    }
}